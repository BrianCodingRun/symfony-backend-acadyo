name: CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    test:
        runs-on: ubuntu-24.04

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Create test environment file
              run: |
                  cp .env .env.test.local || true
                  echo "MONGODB_URL=mongodb://root:rootpassword@mongodb_name:27017/acadyodb_test?authSource=admin" >> .env.test.local
                  echo "APP_ENV=test" >> .env.test.local

            - name: Run tests
              run: |
                  set -e
                  docker compose -f docker-compose.test.yaml up --build --abort-on-container-exit

            - name: Cleanup
              if: always()
              run: |
                  docker compose -f docker-compose.test.yaml down -v
                  docker system prune -f

    deploy:
        runs-on: ubuntu-24.04
        needs: test
        if: github.ref == 'refs/heads/main'

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Deploy to server
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ secrets.SERVER_HOST }}
                  username: ${{ secrets.SERVER_USER }}
                  password: ${{ secrets.SERVER_PASSWORD }}
                  script: |
                      set -e
                      cd todolist-app

                      echo "üîÑ Mise √† jour du code source..."
                      eval "$(ssh-agent -s)"
                      git pull origin main

                      echo "üõë Arr√™t des anciens containers..."
                      docker compose down

                      echo "üßπ Nettoyage des anciennes images..."
                      docker system prune -f

                      echo "üöÄ D√©marrage des nouveaux containers..."
                      APP_ENV=prod docker compose up -d --build

                      echo "‚è≥ Attente du d√©marrage des services..."
                      sleep 30

                      echo "üîç V√©rification du statut des containers..."
                      docker compose ps

                      echo "üß™ Test de sant√© de l'application..."
                      if curl -f -s http://localhost > /dev/null; then
                          echo "‚úÖ Application accessible !"
                      else
                          echo "‚ùå Erreur: Application non accessible"
                          docker compose logs app_name
                          exit 1
                      fi

                      echo "‚úÖ D√©ploiement termin√© avec succ√®s !"

    notify:
        runs-on: ubuntu-24.04
        needs: [deploy]
        if: always()

        steps:
            - name: Notify deployment result
              run: |
                  if [ "${{ needs.deploy.result }}" == "success" ]; then
                      echo "‚úÖ D√©ploiement r√©ussi sur ${{ secrets.SERVER_HOST }}"
                  else
                      echo "‚ùå √âchec du d√©ploiement"
                      exit 1
                  fi
